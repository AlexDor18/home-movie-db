# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build project

on:
  push:
    branches: [ "development", "main" ]
  pull_request:
    branches: [ "development", "main" ]

jobs:
  #  build:
  #    name: Build and analyse
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #    - uses: actions/checkout@v4
  #    - name: Set up JDK 21
  #      uses: actions/setup-java@v4
  #      with:
  #        java-version: '21'
  #        distribution: 'temurin'
  #        cache: maven
  #    - name: Build with Maven
  #      run: mvn -B install --file pom.xml
  #  sonar:
  #    name: Run sonar checks
  #    needs: build
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #        with:
  #          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #      - name: Set up JDK 21
  #        uses: actions/setup-java@v4
  #        with:
  #          java-version: 21
  #          distribution: 'zulu' # Alternative distribution options are available.
  #      - name: Cache SonarQube packages
  #        uses: actions/cache@v4
  #        with:
  #          path: ~/.sonar/cache
  #          key: ${{ runner.os }}-sonar
  #          restore-keys: ${{ runner.os }}-sonar
  #      - name: Cache Maven packages
  #        uses: actions/cache@v4
  #        with:
  #          path: ~/.m2
  #          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #          restore-keys: ${{ runner.os }}-m2
  #      - name: Build and analyze
  #        env:
  #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #        run: mvn -B install -Pcoverage org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=AlexDor18_home-movie-db
  #  docker:
  #    name: Test docker compose
  #    needs: build
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - name: setup docker-compose
  #        uses: docker/setup-compose-action@v1
  #        with:
  #          version: latest
  #      - name: run docker compose
  #        run: | 
  #          docker compose up -d
  #      - name: Wait for Webserver to be reachable
  #        run: |
  #          echo "Waiting for webserver to be reachable...."
  #          for i in {1..30}; do
  #            if curl -sSf http://localhost:8080/actuator/health > /dev/null; then
  #              echo "Webserver is reachable."
  #              exit 0
  #            fi
  #            echo "Webserver not yet reachable, retrying in 2s..."
  #            sleep 2
  #          done
  #          echo "Webserver failed to become reachable."
  #          docker compose logs
  #          exit 1
  #      - name: Tear down Docker Compose
  #        if: always()
  #        run: docker compose down
  playwright:
    name: Playwright E2E Tests
#    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd home-movie-db-e2e/playwright
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd home-movie-db-e2e/playwright
          npx playwright install --with-deps

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest

      - name: Start Docker Compose
        run: docker compose up -d

      - name: Wait for backend to be reachable
        run: |
          for i in {1..30}; do
            curl -f http://localhost:8080/actuator/health
            if curl -sSf http://localhost:8080/actuator/health > /dev/null; then
              echo "Backend is reachable."
              exit 0
            fi
            echo "Backend not yet reachable, retrying in 2s..."
            sleep 2
          done
          echo "Backend failed to become reachable."
          exit 1

      - name: Run Playwright tests
        run: |
          cd home-movie-db-e2e/playwright
          npx playwright test

      - name: Upload Playwright screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: home-movie-db-e2e/playwright/test-results/

      - name: Tear down Docker Compose
        if: always()
        run: docker compose down
